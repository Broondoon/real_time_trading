services:
  # ---------------------- User Management Service ----------------------
  user-management-service:
    build:
      context: .
      dockerfile: ./user-management-service/Dockerfile
    ports:
      - "${USER_MANAGEMENT_PORT}:${USER_MANAGEMENT_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${USER_MANAGEMENT_DATABASE_URL}
      PORT: ${USER_MANAGEMENT_PORT}
    networks:
      - go-network
    depends_on:
      user-management-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://user-management-service:${USER_MANAGEMENT_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------- Existing Services ----------------------
  microservice-template:
    build:
      context: .
      dockerfile: ./${MICROSERVICE_TEMPLATE_HOST}/Dockerfile
    ports:
      - "${MICROSERVICE_TEMPLATE_PORT}:${MICROSERVICE_TEMPLATE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_ORDER_DATABASE_URL}
      PORT: ${MICROSERVICE_TEMPLATE_PORT}
    networks:
      - go-network
    depends_on:
      order-initiator-service:
        condition: service_healthy
      
      

  matching-engine-service:
    build: 
      context: .
      dockerfile: ./${MATCHING_ENGINE_HOST}/Dockerfile
    ports:
      - "${MATCHING_ENGINE_PORT}:${MATCHING_ENGINE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_ORDER_DATABASE_URL}
      PORT: ${MATCHING_ENGINE_PORT}
    depends_on:
      stock-order-db:
        condition: service_healthy
      stock-database-service:
        condition: service_healthy
    networks:
      - go-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${MATCHING_ENGINE_HOST}:${MATCHING_ENGINE_PORT}/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      
  order-initiator-service:
    build: 
      context: .
      dockerfile: ./${ORDER_INITIATOR_HOST}/Dockerfile
    ports:
      - "${ORDER_INITIATOR_PORT}:${ORDER_INITIATOR_PORT}"
    env_file:
      - .env
    environment:
      PORT: ${ORDER_INITIATOR_PORT}
    networks:
      - go-network
    depends_on:
      transaction-database-service:
        condition: service_healthy
      matching-engine-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ORDER_INITIATOR_HOST}:${ORDER_INITIATOR_PORT}/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  auth-service:
    build: ./auth-service
    env_file:
      - .env
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - go-network

  frontend:
    image: flutter-trading-app
    build:
      dockerfile: ./Dockerfile
      context: ./flutter_frontend/
    networks:
      - go-network

  nginx:
    image: nginx:latest
    container_name: nginx_lb
    ports:
      - "${NGINX_HOST_PORT}:${NGINX_CONTAINER_PORT}"
    env_file:
      - .env
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - auth-db
      - frontend
    networks:
      - go-network

  stock-database-service:
    build: 
      context: .
      dockerfile: ./stock-database/database-service/Dockerfile
    ports:
      - "${STOCK_DATABASE_SERVICE_PORT}:${STOCK_DATABASE_SERVICE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_DATABASE_URL}
      PORT: ${STOCK_DATABASE_SERVICE_PORT}
    networks:
      - go-network
    depends_on:
      stock-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://stock-database-service:${STOCK_DATABASE_SERVICE_PORT}/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  transaction-database-service:
    build: 
      context: .
      dockerfile: ./transaction-database/database-service/Dockerfile
    ports:
      - "${TRANSACTION_DATABASE_SERVICE_PORT}:${TRANSACTION_DATABASE_SERVICE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${TRANSACTION_DATABASE_URL}
      PORT: ${TRANSACTION_DATABASE_SERVICE_PORT}
    networks:
      - go-network
    depends_on:
      transaction-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://transaction-database-service:${TRANSACTION_DATABASE_SERVICE_PORT}/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  user-management-database-service:
    build: 
          context: .
          dockerfile: ./user-management-database/database-service/Dockerfile
    ports:
      - "${USER_MANAGEMENT_DATABASE_SERVICE_PORT}:${USER_MANAGEMENT_DATABASE_SERVICE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${USER_MANAGEMENT_DATABASE_URL}
      PORT: ${USER_MANAGEMENT_DATABASE_SERVICE_PORT}
    networks:
       - go-network
    depends_on:
      user-management-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://user-management-database-service:${USER_MANAGEMENT_DATABASE_SERVICE_PORT}/health"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}

  auth-db:
    image: postgres:latest
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    volumes:
      - auth-db-data:/var/lib/postgresql/data
      - ./auth-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U $AUTH_POSTGRES_USER -d $AUTH_POSTGRES_DB"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
    networks:
      - go-network

  stock-order-db:
    image: postgres:latest
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${STOCK_ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${STOCK_ORDER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${STOCK_ORDER_POSTGRES_DB}
    volumes:
      - stock-order-db-data:/var/lib/postgresql/data
      - ./stock-order-database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $STOCK_ORDER_POSTGRES_USER -d $STOCK_ORDER_POSTGRES_DB"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
    networks:
      - go-network

  transaction-db:
    image: postgres:latest
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TRANSACTION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TRANSACTION_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TRANSACTION_POSTGRES_DB}
    volumes:
      - transaction-db-data:/var/lib/postgresql/data
      - ./transaction-database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $TRANSACTION_POSTGRES_USER -d $TRANSACTION_POSTGRES_DB"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
    networks:
      - go-network

  stock-db:
    image: postgres:latest
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${STOCK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${STOCK_POSTGRES_PASSWORD}
      POSTGRES_DB: ${STOCK_POSTGRES_DB}
    volumes:
      - stock-db-data:/var/lib/postgresql/data
      - ./stock-database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $STOCK_POSTGRES_USER -d $STOCK_POSTGRES_DB"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
    networks:
      - go-network

  user-management-db:
    image: postgres:latest
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${USER_MANAGEMENT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_MANAGEMENT_POSTGRES_DB}
    volumes:
      - user-management-db-data:/var/lib/postgresql/data
      - ./user-management-database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $USER_MANAGEMENT_POSTGRES_USER -d $USER_MANAGEMENT_POSTGRES_DB"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
    networks:
      - go-network



volumes:
  user-management-db-data:
  stock-db-data:
  auth-db-data:
  stock-order-db-data:
  transaction-db-data:

# ---------------------- Networks ----------------------
networks:
  go-network:
    driver: bridge

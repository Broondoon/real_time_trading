services:
  microservice-template:
    build: 
          context: .
          dockerfile: ./microservice-template/Dockerfile
    ports:
      - "${MICROSERVICE_TEMPLATE_PORT}:${MICROSERVICE_TEMPLATE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_ORDER_DATABASE_URL}
      PORT: ${MICROSERVICE_TEMPLATE_PORT}
    networks:
       - go-network
    depends_on:
      stock-order-db:
        condition: service_healthy
  matching-engine-service:
    build: 
          context: .
          dockerfile: ./matching-engine-service/Dockerfile
    ports:
      - "${MATCHING_ENGINE_PORT}:${MATCHING_ENGINE_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_ORDER_DATABASE_URL}
      DATABASE_URL_TRANSACTION: ${STOCK_TRANSACTION_DATABASE_URL}
      PORT: ${MATCHING_ENGINE_PORT}
    depends_on:
      stock-order-db:
        condition: service_healthy
    networks:
       - go-network

  order-executor-service:
    build:
          context: .
          dockerfile: ./order-executor-service/Dockerfile
    ports:
      - "${ORDER_EXECUTOR_PORT}:${ORDER_EXECUTOR_PORT}"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${STOCK_ORDER_DATABASE_URL}
      DATABASE_URL_TRANSACTION: ${STOCK_TRANSACTION_DATABASE_URL}
      PORT: ${ORDER_EXECUTOR_PORT}
    depends_on:
      stock-order-db:
        condition: service_healthy
    networks:
       - go-network


networks:
  go-network:
    driver: bridge           # Use a bridge network to enable container communication